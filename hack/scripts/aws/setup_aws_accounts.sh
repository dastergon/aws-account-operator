#!/usr/bin/env bash

command -v aws >/dev/null 2>&1 || { echo >&2 "Script requires aws but it's not installed.  Aborting."; exit 1; }

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
cd "$DIR" || exit

usage() {
    cat <<EOF
    usage: $0 [ OPTION ]
    Options
    -a      Assigned AWS Account ID 1
    -b      Assigned AWS Account ID 2
    -u      AWS IAM user name
    -n      Append optional ID to AWS resources created (useful if encountering errors)
    -x      Set debug output for bash
EOF
}

if ( ! getopts ":a:b:u:n:" opt); then
    echo ""
    echo "    $0 requires an argument!"
    usage
    exit 1
fi


while getopts ":a:b:u:n:x:" opt; do
    case $opt in
        a)
            AWS_ACCOUNT_ID_1="$OPTARG"
            ;;
        b)
            AWS_ACCOUNT_ID_2="$OPTARG"
            ;;
        u)
            AWS_USERNAME="$OPTARG"
            ;;
        n)
            ID="$OPTARG"
            ;;
        x)
            set -x
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            usage
            exit 1
            ;;
        :)
            echo "$0 Requires an argument" >&2
            usage
            exit 1
            ;;
        esac
    done


if [ -z "$AWS_ACCOUNT_ID_1" ]; then
    usage
    exit 1
fi

if [ -z "$AWS_ACCOUNT_ID_2" ]; then
    usage
    exit 1
fi

if [ -z "$AWS_USERNAME" ]; then
    usage
    exit 1
fi

check_var() {
    if [[ -z "$2" ]]; then
        echo "$1 is not defined. Quitting ..."
        exit 1
    else
        echo "$1=$2"
    fi
}

assume_aws_role() {
    local account_1=$1
    local account_2=$2
    AWS_ASSUME_ROLE=$(aws sts assume-role --profile "$account_2" --role-arn arn:aws:iam::"$account_1":role/OrganizationAccountAccessRole --role-session-name aao-account-setup --output json)
    check_var "AWS_ASSUME_ROLE" "$AWS_ASSUME_ROLE"

    AWS_ACCESS_KEY_ID=$(echo "${AWS_ASSUME_ROLE}" | jq -r '.Credentials.AccessKeyId')
    AWS_SECRET_ACCESS_KEY=$(echo "${AWS_ASSUME_ROLE}" | jq -r '.Credentials.SecretAccessKey')
    AWS_SESSION_TOKEN=$(echo "${AWS_ASSUME_ROLE}" | jq -r '.Credentials.SessionToken')

    check_var "AWS_ACCESS_KEY_ID" "$AWS_ACCESS_KEY_ID"
    export AWS_ACCESS_KEY_ID

    check_var "AWS_SECRET_ACCESS_KEY" "$AWS_SECRET_ACCESS_KEY"
    export AWS_SECRET_ACCESS_KEY

    check_var "AWS_SESSION_TOKEN" "$AWS_SESSION_TOKEN"
    export AWS_SESSION_TOKEN
}

#########################
# Account 1 - Jump Role
#########################
assume_aws_role "${AWS_ACCOUNT_ID_1}" osd-staging-1

# Create the sts Assume role Policy which will be applied to the new Role
ASSUME_ROLE_POLICY_ARN=$(aws iam create-policy --policy-name STSAssumeRolePolicy"${ID}" --policy-document file://./setup-aws-policies/AssumeRolePolicy.json --output json | jq -r '.Policy.Arn')

### Create the Jump Role
TRUST_ARN_FORMAT="arn:aws:iam::277304166082:user/${USERNAME}"
# Here we're updating the ARN value set in the json file with the appropriate value
PREPARED_JSON=$(jq --arg TRUST_ARN_FORMAT "$TRUST_ARN_FORMAT" '.Statement[0].Principal.AWS |= $TRUST_ARN_FORMAT' setup-aws-policies/JumpRoleTrustRelationship.json)
# Create the Role and save its ARN, we'll use it later.
JUMP_ROLE_ARN=$(echo "$PREPARED_JSON" | aws iam create-role --role-name JumpRole"${ID}" --assume-role-policy-document file:///dev/stdin --output json | jq -r '.Role.Arn')
# Attach the ARN generated by the Policy to the Jump Role we created
aws iam attach-role-policy --role-name JumpRole"${ID}" --policy-arn "${ASSUME_ROLE_POLICY_ARN}"


#########################
# Account 2 - Access Role
#########################
assume_aws_role "${AWS_ACCOUNT_ID_2}" osd-staging-2

# Update AccessRoleTrustRelationship with the following Jump Role ARN
PREPARED_JSON=$(jq --arg JUMP_ROLE_ARN "${JUMP_ROLE_ARN}" '.Statement[0].Principal.AWS |= $JUMP_ROLE_ARN' setup-aws-policies/AccessRoleTrustRelationship.json)

# Here we need to add a backoff retry as we may encounter the following error from aws:
## An error occurred (MalformedPolicyDocument) when calling the CreateRole operation: Invalid principal in policy: "AWS":"arn:aws:iam::190496588311:role/JumpRole"
# AWS is running checks to ensure that the principal exists. Because of IAM's eventual consistency model,
# even though the first command to create the Jump Role works and returns an ARN, it takes time to fully
# propagate through AWS systems. Therefore this command to create the Access Role can fail a few times
# before the Role ARN returns as "valid".

max_retries=5
i=1
while ! STS_ROLE_ARN=$(echo "$PREPARED_JSON" | aws iam create-role --role-name "AccessRole${ID}" --assume-role-policy-document file:///dev/stdin --output json)
do
  if [[ $i > $max_retries ]]
  then
    echo "Could not create access role"
    exit 1
  fi
  ((j=2**i))
  echo "Access role Arn not ready yet."
  echo "sleeping $j"
  sleep "$j"
  ((i=i+1))
done

POLICY_ARN=$(aws iam create-policy --policy-name "minimum-permissions-access-role${ID}" --policy-document "file://${PWD}/setup-aws-policies/AccessRolePolicy.json" | jq -r ".Policy.Arn")
aws iam attach-role-policy --policy-arn "${POLICY_ARN}" --role-name "AccessRole${ID}"

STS_ROLE_ARN=$(echo "${STS_ROLE_ARN}" | jq -r '.Role.Arn')

echo "Your Accounts have been setup successfully!"
echo "Place the following in your env variables for the AAO"
echo "STS_ROLE_ARN=${STS_ROLE_ARN}"
echo "STS_JUMP_ARN=${JUMP_ROLE_ARN}"
echo "STS_JUMP_ROLE=${JUMP_ROLE_ARN}"
